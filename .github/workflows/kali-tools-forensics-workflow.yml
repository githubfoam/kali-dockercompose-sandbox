name: "kali docker compose CI workflow"


on:
  push:
    branches: [ test ]

jobs:

  ubuntu-latest-job:
    name: "kali-tools-forensics ubuntu latest"
    runs-on: ubuntu-latest
    env:
      distribution: "kalilinux" #https://hub.docker.com/r/kalilinux/kali-rolling
      version: "latest"
      name: "kali/kali-tools-forensics"
      dockerfiledir: "dockerfiles/kalilinux"
      dockerfilename: "toolkali"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch   
    - name: "docker build kali linux"
      run: |
        sudo mkdir /mnt/share-kali
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        # sudo docker build --no-cache --rm  -t ${name}:${version} . --file dockerfiles/${dockerfilename} 
        # sudo docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
        # docker image ls
        # docker image history ${name}:${version}
        # docker system df -v               
        # docker image inspect ${name}:${version}  
        # docker container ls -a
        docker-compose --version
        # docker-compose ps
        sudo docker-compose --file dockerfiles/kalilinux/docker-compose-kali.yml up -d
        sudo docker-compose ps
                  

  # ubuntu-2004-job:
  #   name: "kali-tools-forensics ubuntu  20.04"
  #   runs-on: ubuntu-20.04
  #   env:
  #     distribution: "kalilinux" #https://hub.docker.com/r/kalilinux/kali-rolling
  #     version: "latest"
  #     name: "kali/kali-tools-forensics"
  #     dockerfilename: "Dockerfile.kalilinux.kali-tools-forensics"    
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #       hostnamectl status
  #       lsb_release -a
  #       lsb_release -d
  #       cat /etc/lsb-release
  #       cat /etc/issue
  #       cat /etc/os-release
  #       sudo apt-get install -y neofetch && neofetch   
  #   - name: "docker build kali linux"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t ${name}:${version} . --file dockerfiles/${dockerfilename} 
  #       docker image ls
  #       docker image history ${name}:${version}
  #       docker system df -v               
  #       docker image inspect ${name}:${version}  
  #       docker container ls -a
        


  # ubuntu-1804-job:
  #   name: "kali-tools-forensics ubuntu-18.04"
  #   runs-on: ubuntu-18.04
  #   env:
  #     distribution: "kalilinux" #https://hub.docker.com/r/kalilinux/kali-rolling
  #     version: "latest"
  #     name: "kali/kali-tools-forensics"
  #     dockerfilename: "Dockerfile.kalilinux.kali-tools-forensics"    
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #       hostnamectl status
  #       lsb_release -a
  #       lsb_release -d
  #       cat /etc/lsb-release
  #       cat /etc/issue
  #       cat /etc/os-release
  #       sudo apt-get install -y neofetch && neofetch    
  #   - name: "docker build kali linux"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t ${name}:${version} . --file dockerfiles/${dockerfilename} 
  #       docker image ls
  #       docker image history ${name}:${version}
  #       docker system df -v               
  #       docker image inspect ${name}:${version}  
  #       docker container ls -a




